Einführung:
	- Prozedurale Generierung (Geschichte)
	- Spiel: Darwin's Avatars
		- Screenshot + Spielkonzept
	- Bisherige Spiele mit dem Fokus auf Steuern von Kreaturen
		- QWOP, Incredipede
	- Übersicht: Funktionsweise des Spiels

EVCs
	- Datenstruktur
		- Morphologie
			- Graph-basierter Genotyp
				- Visualisierung
				- Symmetrie wird durch Graph-Datenstruktur bevorzugt
				- Informationen einer Kante:
					- Position, Ausrichtung, Skalierung, Spiegelung (für Symmetrie)
				- "recursive limit" Parameter eines Knotens gibt an, wie oft er rekursiv repliziert werden kann
				- Mögliche Körperteile sind alle PhysX-Primitiven
					- Quader, Kugeln, Kapseln
				- Mögliche Gelenke sind einige der PhysX-Joints
					- fest, Scharnier (Rotation), Kugel (Rotation auf 3 Achsen), Schiene, zylindrisch (Schiene + Rotation)
				- Grenzen der Bewegungsfreiheit sind implizit durch Physik (Kollisionen) gegeben
			- Muskeln
				- hier untypisch für EVCs: Kraft wird NICHT direkt auf die Gelenke angewendet
				- statdessen: Muskeln sind Verbindungslinien zwischen zwei Punkten auf der Oberfläche der Gliedmaßen
				- physikalisch modelliert als Feder
					- Aktivierung des Muskels entspricht Änderung der Federkonstante
					- Jeder Muskel ist auch ein Sensor ("propriozeptives Feedbacksignal"), Sensorwert ist Ausdehnung des Muskels
			- Gehirn
				- Graph-Struktur ("Knoten und Drähte")
					- neuronales Netz
				- Signale gehen von Sensoren aus und wandern zu Ausgängen
				- Knoten (Neuronen) sind entweder Sensoren, Ausgänge oder mathematische Operationen
				- Jeder Muskel hat zwei Knoten im Gehirn, einen Sensor, einen Aktuator
				- Sensor gibt die Ausdehnung des Muskels an
				- Weitere mögliche Sensoren (bei Sims) sind:
					- Winkel eines Gelenks
					- Kontaktsensor
					- Lichtsensor
				- Mögliche Operationen: Sinus, Komplement, Konstante, Skalierung, Multiplizieren, Dividieren, Addieren, Subtrahieren, Ableiten, Schwellwert, Umschalten, Verzögern, Absolute Differenz					
					- Große Anzahl von möglichen math. Funktionen untypisch für neuronale Netze
					- maximal 3 Inputs pro Neuron
				- darf wiederkehrend sein (Kreise im Graph)
				- Beispiele aus Sims paper verwenden
				- (Sims:) Neuronen gehören jeweils zu einem Knoten des Kreatur-Graphs und werden zusammen mit Knoten von Körperteilen repliziert
					- führt zu "lokalen Kontrollsystemem", die bestimmte Körperteile kontrollieren (Rekursion von Körperteilen führt zur mehrfachen Instanziierung des gleichen neuronalen Teilnetzwerks)
					- macht Entwicklung von koordinierter Bewegung wahrscheinlicher
	- Simulation der Physik: PhysX
	- Evolutionäre Generierung der Kreaturen
		- Entwickelt werden: Morphologie + Muskeln + Gehirn
		- Eklärung von Evolutionären Algorithmen
			- Genotyp ist die Datenstruktur, die den Zusammenbau der Kreatur beschreibt
			- Phenotyp ist die daraus resultierende Kreatur
			- Neue Kreaturen werden erschaffen durch zufällige Mutation oder durch Kombination von mehreren erfolgreichen Genotypen
			- Vorgehensweise:
				1. Starte mit einer Menge an (zufälligen) Kreaturen
				2. Messe Fitness
				3. Verwerfe die schlechtesteten 80%
				4. Fülle die Population mit Mutationen oder Nachkommen auf
					- Kreaturen mit hoher Fitness erzeugen mehr Nachkommen
				5. Wiederhole ab 2. für die nächste Generation
				- Wenn die Fitness einzelner (Top-20%) Kreaturen zu schlecht ist, werden diese durch neue, zufällige, ersetzt 
			- Fitness steigt über mehrere Generationen
		- Fitness-Funktion:
			- Laufgeschwindigkeit
				- das ist auch gleichzeitig das Spielziel
			- zusätzlich: ästhetische Betrachtung (bevorzuge "schöne" Kreaturen)
			- zum Berechnen der Fitfunktion ist eine Physik-Simulation notwendig
		- Mutationen:
			- Verändern von Attributen
				- Booleans werden geflippt
				- Skalare werden um einen Gauß-verteilten Wert verschoben (kleine Veränderungen sind häufiger)
				- Diskrete Variablen mit kleiner Anzahl von möglichen Werten werden zufällig neu ausgelost
			- Hinzufügen oder Entfernen von neuen Knoten
			- Hinzufügen oder Entfernen von neuen Kanten
			- nach der Mutation und Paarung werden nicht angeschlossene Knoten und Kanten gelöscht
		- Paarung von zwei Kreaturen
			- Erstelle Liste der Knoten beider Eltern
			- A: Nehme Knoten eines Elternteils und erstetze zufällige Knoten durch den des anderen Elternteils an der gleichen Position in der Liste
				- Kanten behalten ihre relative Richtung
			- B: Konkateniere beide Listen und "verknote" Kanten zwischen beiden Teilen
		- Zahlenwerte
			- mehrere parallele Prozesse
			- Populationsgröße: 100
			- Überlebens-Anteil: 20%
			- 500 Generationen
			- etwa bei der Hälfte aller Durchläufe entstehen brauchbare Ergebnisse
		- Wie lange dauert dieser Prozess? TODO
			- Physiksimulation muss zur Berechnung jeder Fitnessfunktion ausgeführt werden
				- sehr viele Physiksimulationen für die Entwicklung einer einzelnen Kreatur
			- Fitness wird im Verlauf der Simulation abgeschätzt, bei schlechter Fitness wird die Simulation vorzeitig beendet, um Rechenzeit zu sparen
		- Bugs in der Physik-Engine wie Energie-Leaks oder Rundungsfehler werden von den Kreaturen erkannt und ausgenutzt und müssen vermieden werden
		- Verhindere, dass Kreaturen schnell werden durch Umfallen, indem die Fortbewegung ohne Muskelbewegung gemessen wird

Spielmechanik
	- Erfolgreiche Generierung eines Gehirns demonstriert, dass das Spielziel erreichbar ist
	- Generiertes Gehirn kann für Computergegner verwendet werden
	- Mensch tritt gegen NPC-Kopie der gleichen Kreatur an
	- Rennstrecke ist geradlinig
	- Verlassen der Rennstrecke wird durch unsichtbare Wände verhindert
		- TODO: gibt es diese Wände auch während der Evolution?
	- Das Spiel ist zu Ende, wenn beide Kreaturen die Ziellinie erreicht haben, oder nach Ablauf einer Zeitgrenze
		- Zeitgrenze wird festgelegt durch die Geschwindigkeit des entwickelten Gehirns (* 2)
	- Tastendrücke aktivieren Muskeln, immer 0 oder 1
		- NPC-Gehirne hingegen dürfen Muskeln kontinuirlich verändern
	- Menschen haben als einzige "Eingabe" die visuelle Abbildung der Kreatur und der Bewegung
	- NPCs hingegen haben ausschließlich den Zustand der Muskeln als Eingabe
	- Mögliche Erweiterungen
		- Erlaube NPC nur binäre Kontrolle (wie bei Menschen)
		- Andere Zielsetzungen (Springen, Schwimmen, Kämpfen, Hindernisse, ...)
			- Springen und Schwimmen mit EVCs wurde bereits demonstriert (Sims)
		- Paper diskutiert weitere Spielmechaniken, die nicht direkt mit CI zusammenhängen
			- Sammeln und Tauschen von Kreaturen
			- Online-Wettbewerbe

Beispiele von EVCs
	- ggf. Vorstellen von typischen Fortbewegungsstrategien, die entstehen

Auswertung der Playtests
	
Ergebnisse
	- Spielkonzept ist tragfähig und führt zu Spielspaß
	- hoher Wiederspielwert durch unbegrenzte Menge an Kreaturen und damit neuen Herausforderungen
	- Entwickeln der Kreaturen dauert zu lange für Echtzeitanwendungen
	- Menschen sind Computern unterlegen
	- Anwendung des Konzepts auf andere Spielmechaniken ist vielversprechend

Zusammenfassung

Take Home Message

Demo